generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  lastLoginAt        DateTime?
  lockedUntil        DateTime?
  loginAttempts      Int                @default(0)
  phone              String?            @unique
  phoneVerified      DateTime?
  twoFactorEnabled   Boolean            @default(false)
  dateOfBirth        DateTime?
  gender             String?
  language           String?            @default("en")
  preferences        Json?
  privacySettings    Json?
  timezone           String?            @default("UTC")
  accounts           Account[]
  appointments       Appointment[]
  chatMessages       ChatMessage[]
  communityComments  CommunityComment[]
  communityLikes     CommunityLike[]
  communityPosts     CommunityPost[]
  dataExports        DataExport[]
  emergencyContacts  EmergencyContact[]
  goals              Goal[]
  journalEntries     JournalEntry[]
  loginLogs          LoginLog[]
  medications        Medication[]
  medicationLogs     MedicationLog[]
  moodEntries        MoodEntry[]
  notifications      Notification[]
  otpCodes           OtpCode[]
  progressReports    ProgressReport[]
  sessions           Session[]
  sleepEntries       SleepEntry[]
  treatmentPlans     TreatmentPlan[]
  wellnessActivities WellnessActivity[]
  wellnessLogs       WellnessLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String?
  phone     String
  code      String
  type      OtpType  @default(LOGIN)
  attempts  Int      @default(0)
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([phone, type])
  @@index([expires])
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  phone     String?
  ipAddress String
  userAgent String
  success   Boolean
  reason    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ipAddress])
  @@index([createdAt])
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  mood      Int
  emotions  String[]
  note      String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, createdAt])
  @@index([date])
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  content   String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, createdAt])
  @@index([date])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isUser    Boolean
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  context   Json?
  sentiment Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([userId, createdAt])
  @@index([timestamp])
}

model Goal {
  id           String          @id @default(cuid())
  userId       String
  title        String
  description  String?
  category     String
  targetValue  Float
  currentValue Float           @default(0)
  unit         String
  startDate    DateTime
  targetDate   DateTime
  status       GoalStatus      @default(ACTIVE)
  priority     Int             @default(1)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones   GoalMilestone[]

  @@index([userId, status])
}

model GoalMilestone {
  id          String    @id @default(cuid())
  goalId      String
  title       String
  description String?
  targetDate  DateTime
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  goal        Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId, completed])
}

model SleepEntry {
  id         String   @id @default(cuid())
  userId     String
  bedtime    DateTime
  wakeTime   DateTime
  duration   Float
  quality    Int
  deepSleep  Float?
  remSleep   Float?
  lightSleep Float?
  awakenings Int      @default(0)
  notes      String?
  date       DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}

model Medication {
  id           String          @id @default(cuid())
  userId       String
  name         String
  dosage       String
  frequency    String
  instructions String?
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean         @default(true)
  reminders    Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs         MedicationLog[]

  @@index([userId, isActive])
}

model MedicationLog {
  id            String     @id @default(cuid())
  medicationId  String
  userId        String
  taken         Boolean
  takenAt       DateTime?
  dosage        String?
  sideEffects   String?
  effectiveness Int?
  notes         String?
  date          DateTime   @default(now())
  createdAt     DateTime   @default(now())
  medication    Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([medicationId, date])
  @@index([userId, date])
}

model WellnessActivity {
  id          String        @id @default(cuid())
  userId      String
  name        String
  category    String
  description String?
  duration    Int?
  intensity   String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        WellnessLog[]

  @@index([userId, isActive])
}

model WellnessLog {
  id         String           @id @default(cuid())
  activityId String
  userId     String
  duration   Int
  intensity  String?
  moodBefore Int?
  moodAfter  Int?
  notes      String?
  date       DateTime         @default(now())
  createdAt  DateTime         @default(now())
  activity   WellnessActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([activityId, date])
  @@index([userId, date])
}

model Appointment {
  id            String              @id @default(cuid())
  userId        String
  therapistId   String
  therapistName String
  type          AppointmentType
  date          DateTime
  duration      Int
  status        AppointmentStatus   @default(SCHEDULED)
  location      AppointmentLocation
  notes         String?
  reminderSent  Boolean             @default(false)
  paymentStatus PaymentStatus       @default(PENDING)
  cost          Float?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([therapistId, date])
}

model EmergencyContact {
  id              String   @id @default(cuid())
  userId          String
  name            String
  relationship    String
  phone           String
  email           String?
  address         String?
  notes           String?
  isPrimary       Boolean  @default(false)
  isAvailable24_7 Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TreatmentPlan {
  id            String          @id @default(cuid())
  userId        String
  therapistId   String
  therapistName String
  title         String
  description   String
  goals         Json
  milestones    Json
  startDate     DateTime
  endDate       DateTime
  status        TreatmentStatus @default(ACTIVE)
  lastUpdated   DateTime        @default(now())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

model ProgressReport {
  id               String   @id @default(cuid())
  userId           String
  therapistId      String
  therapistName    String
  date             DateTime
  sessionNotes     String
  moodRating       Int?
  progressAreas    Json
  challenges       Json
  homework         Json
  nextSessionFocus String?
  recommendations  Json
  isShared         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([therapistId, date])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  scheduled DateTime?
  sent      Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([scheduled])
}

model DataExport {
  id          String       @id @default(cuid())
  userId      String
  type        String
  format      String
  status      ExportStatus @default(PENDING)
  requestedAt DateTime     @default(now())
  completedAt DateTime?
  expiresAt   DateTime
  size        String?
  downloadUrl String?
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

model CommunityPost {
  id                String             @id @default(cuid())
  userId            String
  title             String
  content           String
  category          String
  tags              String[]
  isPublic          Boolean            @default(true)
  likes             Int                @default(0)
  comments          Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  communityComments CommunityComment[]
  communityLikes    CommunityLike[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([category, createdAt])
}

model CommunityComment {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  content   String
  parentId  String?
  likes     Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
  @@index([userId, createdAt])
}

model CommunityLike {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

enum OtpType {
  LOGIN
  REGISTRATION
  PASSWORD_RESET
  PHONE_VERIFICATION
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum AppointmentType {
  INDIVIDUAL
  GROUP
  COUPLES
  FAMILY
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum AppointmentLocation {
  IN_PERSON
  VIDEO
  PHONE
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum TreatmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

enum NotificationType {
  REMINDER
  APPOINTMENT
  MEDICATION
  MOOD_CHECK
  GOAL_UPDATE
  SYSTEM
}

enum ExportStatus {
  PENDING
  PROCESSING
  READY
  EXPIRED
  FAILED
}
